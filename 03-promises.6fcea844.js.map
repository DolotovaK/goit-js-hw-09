{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAKMC,EAAOC,SAASC,cAAc,SAMhCC,EAAc,CAChBC,MAAO,EACPC,KAAM,EACNC,OAAQ,EACRC,SAAU,GAUZ,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtB,IAAIC,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAa,CACjBV,SAAAE,EACAL,MAAAM,GAEEC,EACFI,EAAQE,GAERD,EAAOC,MAIRC,MAAK,SAAAC,G,IAAGZ,EAAQY,EAARZ,SAAUH,EAAKe,EAALf,MACjBgB,YACE,W,OACEC,EAAAvB,GAASwB,OAAOC,QACd,uBAAwCC,OAAfjB,EAAS,QAAYiB,OAANpB,EAAM,SAElDA,MAGHqB,OAAM,SAAAN,G,IAAGZ,EAAQY,EAARZ,SAAUH,EAAKe,EAALf,MAClBgB,YACE,W,OACEC,EAAAvB,GAASwB,OAAOI,QACd,sBAAuCF,OAAfjB,EAAS,QAAYiB,OAANpB,EAAM,SAEjDA,MApCRJ,EAAK2B,iBACH,SACA,SAAAC,G,OAAQzB,EAAYyB,EAAIC,OAAOC,OAASF,EAAIC,OAAOE,SAGrD/B,EAAK2B,iBAAiB,UAoCtB,SAAyBC,GACvBA,EAAII,iBAGJ,IAFA,IAAIC,EAAc9B,EAAYC,MAErB8B,EAAI,EAAGA,EAAI/B,EAAYG,OAAQ4B,GAAK,EAC3C1B,EAAcL,EAAYI,SAAU0B,GACpC9B,EAAYI,UAAY,EACxB0B,GAAe9B,EAAYE,KAC3B8B,QAAQC,IAAIH,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n// const createBtn = document.querySelector('button');\n// const amountInput = document.querySelector('input[name=amount]');\n// const delayInput = document.querySelector('input[name=delay]');\n// const stepInput = document.querySelector('input[name=step]');\nconst form = document.querySelector('.form');\n\n// form.addEventListener('submit', onCreatePromise);\n\n// console.log(form.elements);\n\nlet inputValues = {\n  delay: 0,\n  step: 0,\n  amount: 0,\n  position: 0,\n};\n\nform.addEventListener(\n  'input',\n  evt => (inputValues[evt.target.name] = +evt.target.value)\n);\n\nform.addEventListener('submit', onCreatePromise);\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    const promiseObj = {\n      position,\n      delay,\n    };\n    if (shouldResolve) {\n      resolve(promiseObj);\n    } else {\n      reject(promiseObj);\n    }\n  });\n  promise\n    .then(({ position, delay }) => {\n      setTimeout(\n        () =>\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          ),\n        delay\n      );\n    })\n    .catch(({ position, delay }) => {\n      setTimeout(\n        () =>\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          ),\n        delay\n      );\n    });\n}\n\nfunction onCreatePromise(evt) {\n  evt.preventDefault();\n  let delayResult = inputValues.delay;\n\n  for (let i = 0; i < inputValues.amount; i += 1) {\n    createPromise(inputValues.position, delayResult);\n    inputValues.position += 1;\n    delayResult += inputValues.step;\n    console.log(delayResult);\n  }\n}\n\n//  console.log(delayResult);\n//  console.log(inputValues.delay);\n\n// function createPromise(position, delay) {\n//   // delay = delayInput[0].value;\n//   // position = amountInput[0].value;\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     let promiseObj = { position, delay };\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve(promiseObj);\n//       } else {\n//         reject(promiseObj);\n//       }\n//     }, delay);\n//   });\n//   // .then(({ position, delay }) => {\n//   //   Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   // })\n//   // .catch(({ position, delay }) => {\n//   //   Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//   // });\n// }\n\n// function onCreatePromise(evt) {\n//   evt.preventDefault();\n//   let delayValue = Number(delayInput.value);\n//   let stepValue = Number(stepInput.value);\n//   let amountValue = Number(amountInput.value);\n\n//   for (let i = 1; 1 <= amountValue; i += 1) {\n//     let position = i;\n//     createPromise(position, delayValue)\n//       .then(({ position, delay }) => {\n//         Notiflix.Notify.success(\n//           `✅ Fulfilled promise ${position} in ${delay}ms`\n//         );\n//       })\n//       .catch(({ position, delay }) => {\n//         Notiflix.Notify.failure(\n//           `❌ Rejected promise ${position} in ${delay}ms`\n//         );\n//       });\n//     delayValue += stepValue;\n//   }\n// }\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$inputValues","delay","step","amount","position","$ce04d3a99e08e73b$var$createPromise","position1","delay1","shouldResolve","Math","random","Promise","resolve","reject","promiseObj","then","param","setTimeout","$parcel$interopDefault","Notify","success","concat","catch","failure","addEventListener","evt","target","name","value","preventDefault","delayResult","i","console","log"],"version":3,"file":"03-promises.6fcea844.js.map"}